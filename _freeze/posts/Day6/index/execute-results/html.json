{
  "hash": "11b35e5162c9f0e84222043bb40d49c2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day6: Inference for a Single Mean\"\nauthor: \"Hardik Monga\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mosaic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggformula)\nlibrary(infer)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(broom) # Clean test results in tibble form\nlibrary(resampledata) # Datasets from Chihara and Hesterberg's book\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'resampledata'\n\nThe following object is masked from 'package:datasets':\n\n    Titanic\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(openintro) # More datasets\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: airports\nLoading required package: cherryblossom\nLoading required package: usdata\n\nAttaching package: 'openintro'\n\nThe following object is masked from 'package:mosaic':\n\n    dotPlot\n\nThe following objects are masked from 'package:lattice':\n\n    ethanol, lsegments\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(40)  # for replication\n# Data as individual vectors ( for t.tests etc)\ny <- rnorm(50, mean = 2, sd = 2)\n\n# And as tibble too\nmydata <- tibble(x = y)\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 1\n        x\n    <dbl>\n 1  2.96 \n 2  2.99 \n 3  0.281\n 4  0.342\n 5  1.36 \n 6 -0.608\n 7 -0.843\n 8  5.49 \n 9  1.42 \n10 -0.618\n# ℹ 40 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata %>%\n    gf_density(~y) %>%\n    gf_fitdistr(dist = \"dnorm\") %>%\n    gf_labs(title = \"Densities of Original Data Variables\", subtitle = \"Compared with Normal Density\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsigned_rank <- function(x) {\n    sign(x) * rank(abs(x))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate exact mean\nobs_mean <- mean( ~ y, data = mydata)\nbelief1 <- 0 # What we think the mean is\nobs_diff_mosaic <- obs_mean - belief1\nobs_diff_mosaic\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.045689\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Steps in Permutation Test\n## Repeatedly Shuffle polarities of data observations\n## Take means\n## Compare all means with the real-world observed one\nnull_dist_mosaic <- \nmosaic::do(9999) * mean( ~ abs(y) * \n          sample(c(-1, 1), # +/- 1s multiply y\n            length(y),     # How many +/- 1s?\n            replace = T),  # select with replacement\n        data = mydata)\n##\nrange(null_dist_mosaic$mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.754293  1.473298\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n##\n## Plot this NULL distribution\ngf_histogram(\n  ~ mean,\n  data = null_dist_mosaic,\n  fill = ~ (mean >= obs_diff_mosaic),\n  bins = 50, title = \"Distribution of Permutation Means under Null Hypothesis\",\n  subtitle = \"Why is the mean of the means zero??\") %>%\n  gf_labs(x = \"Calculated Random Means\",\n          y = \"How Often do these occur?\") %>% \n  gf_vline(xintercept = obs_diff_mosaic, colour = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# p-value\n# Null distributions are always centered around zero. Why?\nprop(~ mean >= obs_diff_mosaic, \n     data = null_dist_mosaic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nprop_TRUE \n        0 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n##\n## Resample with replacement from the one sample of 50\n## Calculate the mean each time\nnull_toy_bs <- mosaic::do(4999) * \n  mean( ~ sample(y,\n            replace = T), # select with replacement\n        data = mydata)\n\n## Plot this NULL distribution\ngf_histogram(\n  ~ mean,\n  data = null_toy_bs,\n  bins = 50, \n  title = \"Distribution of Bootstrap Means\") %>%\n  gf_labs(x = \"Calculated Random Means\",\n          y = \"How Often do these occur?\") %>% \n  gf_vline(xintercept = ~ belief1, colour = \"red\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprop(~ mean >= belief1, \n     data = null_toy_bs) +\n  prop(~ mean <= - belief1, \n     data = null_toy_bs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nprop_TRUE \n        1 \n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "dad89deecfd0193bbc1f6b8edb350b81",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ikea Furniture\"\nauthor: \"Hardik Monga\"\n---\n\n\n\n# Libraries Used\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mosaic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(skimr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggformula)\nlibrary(ggridges)\nlibrary(ggplot2)\n```\n:::\n\n\n\n# Ikea Dataset - Import, Skim and Inspect\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nikea <- read_delim(file = \"../../data/ikea-modified.csv\", delim = \";\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 3211 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (8): name, category, old_price, link, other_colors, short_description, d...\ndbl (5): item_id, depth, height, width, category_total\nnum (1): price\nlgl (1): sellable_online\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nikea\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,211 × 15\n    item_id name     category price old_price sellable_online link  other_colors\n      <dbl> <chr>    <chr>    <dbl> <chr>     <lgl>           <chr> <chr>       \n 1 29123958 MINNEN   Beds (2…  3950 SR 445    TRUE            http… No          \n 2 49278341 BRIMNES  Beds (2…  8950 SR 925    TRUE            http… No          \n 3 50461230 SMÅGÖRA  Beds (2…  5950 No old p… TRUE            http… No          \n 4 89326463 PLATSA   Beds (2… 21110 SR 2,205  TRUE            http… No          \n 5 50468953 VATTVIK… Beds (2…  9950 No old p… TRUE            http… No          \n 6 69326609 SLÄKT    Beds (2…  5400 No old p… FALSE           http… No          \n 7 59099136 BRIMNES  Beds (2…  7950 No old p… TRUE            http… Yes         \n 8 40395245 NEIDEN   Beds (2…   990 No old p… TRUE            http… No          \n 9 69277307 LEIRVIK  Beds (2… 11950 No old p… TRUE            http… Yes         \n10 70395239 NEIDEN   Beds (2…  1990 No old p… TRUE            http… No          \n# ℹ 3,201 more rows\n# ℹ 7 more variables: short_description <chr>, designer <chr>, depth <dbl>,\n#   height <dbl>, width <dbl>, price_usd <chr>, category_total <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nskim(ikea)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |     |\n|:------------------------|:----|\n|Name                     |ikea |\n|Number of rows           |3211 |\n|Number of columns        |15   |\n|_______________________  |     |\n|Column type frequency:   |     |\n|character                |8    |\n|logical                  |1    |\n|numeric                  |6    |\n|________________________ |     |\n|Group variables          |None |\n\n\n**Variable type: character**\n\n|skim_variable     | n_missing| complete_rate| min|  max| empty| n_unique| whitespace|\n|:-----------------|---------:|-------------:|---:|----:|-----:|--------:|----------:|\n|name              |         0|             1|   3|   27|     0|      583|          0|\n|category          |         0|             1|  10|   32|     0|        9|          0|\n|old_price         |         0|             1|   4|   13|     0|      351|          0|\n|link              |         0|             1|  52|  163|     0|     2765|          0|\n|other_colors      |         0|             1|   2|    3|     0|        2|          0|\n|short_description |         0|             1|   3|   54|     0|     1566|          0|\n|designer          |         0|             1|   3| 1261|     0|      374|          0|\n|price_usd         |         0|             1|   5|    8|     0|      969|          0|\n\n\n**Variable type: logical**\n\n|skim_variable   | n_missing| complete_rate| mean|count              |\n|:---------------|---------:|-------------:|----:|:------------------|\n|sellable_online |         0|             1|    1|TRU: 3196, FAL: 15 |\n\n\n**Variable type: numeric**\n\n|skim_variable  | n_missing| complete_rate|        mean|          sd|     p0|      p25|      p50|      p75|     p100|hist  |\n|:--------------|---------:|-------------:|-----------:|-----------:|------:|--------:|--------:|--------:|--------:|:-----|\n|item_id        |         0|          1.00| 48811299.01| 28815585.18| 102065| 20403626| 49289392| 70403939| 99932615|▇▇▇▇▇ |\n|price          |         0|          1.00|    11623.64|    14439.10|     30|     1855|     5950|    15960|    95850|▇▂▁▁▁ |\n|depth          |      1341|          0.58|       56.16|       32.12|      1|       37|       47|       66|      257|▇▅▁▁▁ |\n|height         |       925|          0.71|      104.86|       63.93|      1|       70|       83|      140|      700|▇▂▁▁▁ |\n|width          |       563|          0.82|      110.31|       73.86|      1|       60|       81|      150|      420|▇▅▂▁▁ |\n|category_total |         0|          1.00|      422.41|      152.34|    190|      236|      481|      548|      612|▆▂▃▃▇ |\n\n\n:::\n\n```{.r .cell-code}\ninspect(ikea)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\ncategorical variables:  \n               name     class levels    n missing\n1              name character    583 3211       0\n2          category character      9 3211       0\n3         old_price character    351 3211       0\n4   sellable_online   logical      2 3211       0\n5              link character   2765 3211       0\n6      other_colors character      2 3211       0\n7 short_description character   1566 3211       0\n8          designer character    374 3211       0\n9         price_usd character    969 3211       0\n                                   distribution\n1  BESTÅ (5.3%), PAX (3.5%) ...                \n2 Tables & desks (612) (19.1%) ...             \n3 No old price (82.1%), SR 1,385 (0.2%) ...    \n4 TRUE (99.5%), FALSE (0.5%)                   \n5  (%) ...                                     \n6 No (57.6%), Yes (42.4%)                      \n7 Chair (1.7%) ...                             \n8 IKEA of Sweden (23.2%) ...                   \n9 27,000 (1.5%), 6,750 (1.5%) ...              \n\nquantitative variables:  \n            name   class    min       Q1   median       Q3      max\n1        item_id numeric 102065 20403626 49289392 70403939 99932615\n2          price numeric     30     1855     5950    15960    95850\n3          depth numeric      1       37       47       66      257\n4         height numeric      1       70       83      140      700\n5          width numeric      1       60       81      150      420\n6 category_total numeric    190      236      481      548      612\n          mean           sd    n missing\n1 4.881130e+07 2.881559e+07 3211       0\n2 1.162364e+04 1.443910e+04 3211       0\n3 5.615829e+01 3.212208e+01 1870    1341\n4 1.048635e+02 6.392570e+01 2286     925\n5 1.103123e+02 7.386185e+01 2648     563\n6 4.224145e+02 1.523443e+02 3211       0\n```\n\n\n:::\n:::\n\n\n\n# Variable Types and Observations\n\n**Quantitative Variables:** price, old_price, sellable_online, other_colors, depth, height, width, price_usd, category_total\n\n**Qualitative Variables:** item_id, name, category, link, short_description, designer\n\n**Observations:** There are alot of missing row for depth, height and width variables. The minimum price for an item is 30, the max price for an item is 95850, while the median price is 5950. This median of the prices shows items with price in 5 digits are an exception.\n\n**Target Variable**: price, price_usd\n\n**Predictor variables**: category, other_colors\n\n# Plotting the Ridge Graph with both price and price_usd\n\n#### 1. price on x-axis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ikea, aes(x = price, y = category)) + \n  geom_density_ridges(scale = 2, alpha = 0.7) +\n  labs(x = \"Price\", y = \"Category\") +\n  theme_minimal() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 2860\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n#### 2. price_usd on x-axis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ikea, aes(x = price_usd, y = category)) + \n  geom_density_ridges(scale = 2, alpha = 0.7) +\n  labs(x = \"Price (USD)\", y = \"Category\") +\n  theme_minimal() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 345\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n**Observations:** This graph plots multiple ridges for the same category. After searching on google, I found that there might be sub-categories in the category variable which are showing up as different ridges. But this is only the case when I use price_usd as the target variable and not when I use price. I still could not find a reason for that.\n\n#### 3. price_usd on x-axis with grouped categories\n\nFollowing google's suggestions, I have grouped the category column which seems to have solved the problem of multiple ridges.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure price_usd is numeric\n\n\nggplot(ikea, aes(x = price_usd, y = category, group = category)) + \n  geom_density_ridges(scale = 2, alpha = 0.7) +\n  labs(x = \"Price (USD)\", y = \"Category\") +\n  theme_minimal() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 76.6\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n# Plotting the Ridge Graph with both price and price_usd including the other_colors variable\n\n#### 1. price_usd on x-axis along with other_colors\n\nI am yet to figure out how the group code works in this. I have simply copied and modified the code from google for this graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nikea$other_colors <- as.factor(ikea$other_colors)\n\nggplot(ikea, aes(x = price_usd, y = category, fill= other_colors, group = interaction(category, other_colors))) + \n  geom_density_ridges(scale = 1, alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 88.8\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n#### 2. price on x-axis along with other_colors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nikea$other_colors <- as.factor(ikea$other_colors)\n\nggplot(ikea, aes(x = price, y = category, fill= other_colors)) + \n  geom_density_ridges(scale = 1, alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 3280\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n# Thoughts and Inference:\n\n-   **Research Experiment that might have been conducted to obtain that data:** I think the motive behind the collection of this data was to track the items present in some Ikea Warehouse. This data doesn't seem to be motivated by any research query as It doesn't contain the variables like production cost, raw materials information, transport cost, or other predictor variables which determine the price of an item.\n\n-   **Questions that the Graph seeks to answer:** Looking into the difference in the price of Ikea items available in different colors versus only in one color.\n\n-   **My Experience:** I was not able to make the exact replication of the graph given and I think the main reason behind that would be the missing decimal points in the values in the price variable. I am not able to achieve the same range on the x-axis for price and price_usd. I think if I fix the decimal point in the values in those variables, my graph plot would look closer to the original version.\n\n-   **Inference:** Looking at the majority of graphs in all the categories, It seems that the items with no other color options available are in the lesser price range compared to the items with multiple color options. It is only the 'Chairs' and 'Tables and Desks' Categories which seem to contradict the trend with less price range of items available in multiple colors. I think the reason behind this might be that chairs and desks are more frequently bought, lower price items and hence, one model is available in multiple colors in a lower price range.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}